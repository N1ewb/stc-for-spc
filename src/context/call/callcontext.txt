import React, { useContext, createContext, useEffect } from "react";

import { useRef, useState } from "react";
import { firestore, servers } from "../../server/firebase";
import {
  collection,
  doc,
  addDoc,
  setDoc,
  onSnapshot,
  getDoc,
  updateDoc,
  deleteDoc,
  serverTimestamp,
  where,
  query,
  limit,
  orderBy,
} from "firebase/firestore";

import { useAuth } from "../auth/AuthContext";

import toast, { Toaster } from "react-hot-toast";

const callContext = createContext();

export function useCall() {
  return useContext(callContext);
}

export const CallProvider = ({ children }) => {
  const callOffersRef = collection(firestore, "CallOffers");
  const auth = useAuth();
  const toastMessage = (message) => toast(message);

  const localVideoRef = useRef();
  const remoteVideoRef = useRef();
  const callInput = useRef();
  const [pc, setPc] = useState(new RTCPeerConnection(servers));

  const [localStream, setLocalStream] = useState();
  const [remoteStream, setRemoteStream] = useState(new MediaStream());

  useEffect(() => {
    return () => {
      if (pc) pc.close();
    };
  }, [pc]);

  const resetStreams = () => {
    if (localStream) {
      localStream.getTracks().forEach((track) => track.stop());
      setLocalStream(null);
    }
    if (remoteStream) {
      remoteStream.getTracks().forEach((track) => track.stop());
      setRemoteStream(new MediaStream());
    }
    if (localVideoRef.current) localVideoRef.current.srcObject = null;
    if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
  };

  const PcState = () => {
    if (pc.signalingState === "closed") {
      setPc(new RTCPeerConnection(servers));
    }
  };

  const handleWaitForLocalStream = async () => {
    if (!localStream) {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true,
        });
        return stream;
      } catch (error) {
        console.error("Error accessing media devices:", error);
        throw error;
      }
    }
    return localStream;
  };

  const WebcamOn = async () => {
    try {
      if (!localVideoRef.current.srcObject) {
        localVideoRef.current.srcObject = localStream;
      } else {
        localVideoRef.current.srcObject = null;
      }
    } catch (error) {
      console.log("camera error", error);
    }
  };

  const InitializeStreams = async () => {
    try {
      PcState();
      const getLocalStream = await handleWaitForLocalStream();
      setLocalStream(getLocalStream);

      getLocalStream.getTracks().forEach((track) => {
        pc.addTrack(track, getLocalStream);
      });

      pc.ontrack = (event) => {
        event.streams[0].getTracks().forEach((track) => {
          remoteStream.addTrack(track);
        });

        if (remoteStream.getTracks().length > 0) {
          remoteVideoRef.current.srcObject = remoteStream;
        }
      };

      try {
        while (remoteStream.active === false) {
          remoteVideoRef.current.srcObject = remoteStream;
          break;
        }
        localVideoRef.current.srcObject = getLocalStream;

        console.log("remote stream", remoteStream);
        console.log("local stream", getLocalStream);
      } catch (error) {
        console.log("Video Refs Error", error);
      }
    } catch (error) {
      console.log("Track nasad piss tea", error);
    }
  };

  //Create Offer
  const CallButton = async () => {
    try {
      PcState();
      await InitializeStreams();
      const callDoc = doc(collection(firestore, "calls"));
      const offerCandidates = collection(callDoc, "offerCandidates");
      const answerCandidates = collection(callDoc, "answerCandidates");

      callInput.current.value = callDoc.id;

      pc.onicecandidate = (event) => {
        event.candidate && addDoc(offerCandidates, event.candidate.toJSON());
      };

      const offerDescription = await pc.createOffer();
      await pc.setLocalDescription(offerDescription && offerDescription);

      const offer = {
        sdp: offerDescription.sdp,
        type: offerDescription.type,
      };

      await setDoc(callDoc, { offer });

      onSnapshot(callDoc, (snapshot) => {
        const data = snapshot.data();
        if (!pc.currentLocalDescription && data?.answer) {
          const answerDescritpion = new RTCSessionDescription(data.answer);
          pc.setRemoteDescription(answerDescritpion);
        }
      });

      onSnapshot(answerCandidates, (snapshot) => {
        snapshot.docChanges().forEach((change) => {
          if (change.type === "added") {
            const candidateData = change.doc.data();
            const candidate = new RTCIceCandidate(candidateData);
            pc.addIceCandidate(candidate);
          }
        });
      });
    } catch (error) {
      toastMessage(error.message);
    }
  };

  const AnswerCall = async () => {
    try {
      PcState();
      await InitializeStreams();

      const callId = callInput.current.value;
      const callDoc = doc(collection(firestore, "calls"), callId);
      const answerCandidates = collection(callDoc, "answerCandidates");
      const offerCandidates = collection(callDoc, "offerCandidates");

      pc.onicecandidate = async (event) => {
        if (event.candidate) {
          await addDoc(answerCandidates, event.candidate.toJSON());
        }
      };

      let callData = (await getDoc(callDoc)).data();

      while (!callData?.offer || !callData.offer.type) {
        await new Promise((resolve) => setTimeout(resolve, 100));
        callData = (await getDoc(callDoc)).data();
      }

      const offerDescription = new RTCSessionDescription(callData.offer);
      await pc.setRemoteDescription(offerDescription);

      const answerDescription = await pc.createAnswer();
      await pc.setLocalDescription(answerDescription);

      const answer = {
        type: answerDescription.type,
        sdp: answerDescription.sdp,
      };

      await updateDoc(callDoc, { answer });

      onSnapshot(offerCandidates, (snapshot) => {
        snapshot.docChanges().forEach((change) => {
          if (change.type === "added") {
            const candidateData = change.doc.data();
            const candidate = new RTCIceCandidate(candidateData);
            pc.addIceCandidate(candidate).catch(console.error);
          }
        });
      });
      console.log("Remote Video Track", remoteVideoRef.current.srcObject);
      console.log("Remote stream tracks:", remoteStream.getTracks());
      console.log("PeerConnection state:", pc.connectionState);
      console.log("ICE connection state:", pc.iceConnectionState);
    } catch (error) {
      toastMessage(error.message);
    }
  };

  const hangUp = async (newCalloffer) => {
    try {
      const callId = callInput.current.value;
      const callDoc = doc(collection(firestore, "calls"), callId);
      const callOfferDoc = doc(collection(firestore, "CallOffers"), callId);

      if (pc.signalingState !== "closed") {
        pc.close();
        pc.onicecandidate = null;

        if (localStream) {
          localStream.getTracks().forEach((track) => track.stop());
          setLocalStream(null);
        }

        if (localVideoRef.current) localVideoRef.current.srcObject = null;
        if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;

        setRemoteStream(new MediaStream());

        await Promise.all([
          updateDoc(doc(firestore, "CallOffers", newCalloffer), {
            status: "ended",
          }),
          deleteDoc(callDoc),
          deleteDoc(callOfferDoc),
        ]);
      } else {
        if (localStream) {
          localStream.getTracks().forEach((track) => track.stop());
          setLocalStream(null);
        }
        setRemoteStream(new MediaStream());

        localVideoRef.current.srcObject = null;
        remoteVideoRef.current.srcObject = null;
        setLocalStream(null);
        setRemoteStream(null);
      }
    } catch (error) {
      console.error("Error during hangup:", error);
      toastMessage(error.message);
    }
  };

  const offerCall = async (receiver, caller, callID) => {
    try {
      if (auth.currentUser) {
        await addDoc(callOffersRef, {
          receiver: receiver,
          caller: caller,
          callID: callID,
          status: "calling",
          createdAt: serverTimestamp(),
        });
      }
    } catch (error) {
      console.log(error);
    }
  };

  const updateCallOffer = async (offerID) => {
    if (auth.currentUser) {
      const callofferdocref = doc(firestore, "CallOffers", offerID);
      const updateCallOffer = { status: "responded" };
      await updateDoc(callofferdocref, updateCallOffer);
    }
  };

  const answerCallOffer = async (offerID) => {
    if (auth.currentUser) {
      try {
        PcState();
        const callofferdocref = doc(firestore, "CallOffers", offerID);
        const updateCallOffer = { status: "answered" };
        await updateDoc(callofferdocref, updateCallOffer);
      } catch (error) {
        console.log("Error in answering call offer", error.message);
      }
    }
  };

  const subscribeToAnsweredOfferChanges = async (callback) => {
    try {
      if (auth.currentUser) {
        const unsubscribe = onSnapshot(
          query(
            callOffersRef,
            where("caller", "==", auth.currentUser.uid),
            where("status", "==", "answered"),
            orderBy("createdAt", "desc"),
            limit(1)
          ),
          (snapshot) => {
            snapshot.docChanges().forEach((change) => {
              if (change.type === "added") {
                const doc = change.doc;
                const data = {
                  id: doc.id,
                  ...doc.data(),
                };
                callback(data);
              }
            });
          }
        );
        return unsubscribe;
      }
    } catch (error) {
      console.log(error);
    }
  };

  const subscribeToCallOfferChanges = async (callback) => {
    try {
      if (auth.currentUser) {
        const unsubscribe = onSnapshot(
          query(
            callOffersRef,
            where("receiver", "==", auth.currentUser.uid),
            where("status", "==", "calling"),
            orderBy("createdAt", "desc"),
            limit(1)
          ),
          (snapshot) => {
            snapshot.docChanges().forEach((change) => {
              if (change.type === "added") {
                const doc = change.doc;
                const data = {
                  id: doc.id,
                  ...doc.data(),
                };
                callback(data);
              }
            });
          }
        );
        return unsubscribe;
      }
    } catch (error) {
      console.log(error);
    }
  };

  const subscribeToRespondedCallChanges = async (callback) => {
    try {
      if (auth.currentUser) {
        const unsubscribe = onSnapshot(
          query(
            callOffersRef,
            where("receiver", "==", auth.currentUser.uid),
            where("status", "==", "responded"),
            orderBy("createdAt", "desc"),
            limit(1)
          ),
          (snapshot) => {
            snapshot.docChanges().forEach((change) => {
              if (change.type === "added") {
                const doc = change.doc;
                const data = {
                  id: doc.id,
                  ...doc.data(),
                };
                callback(data);
              }
            });
          }
        );
        return unsubscribe;
      }
    } catch (error) {
      console.log(error);
    }
  };

  const value = {
    PcState,
    WebcamOn,
    CallButton,
    AnswerCall,
    hangUp,
    localVideoRef,
    remoteVideoRef,
    callInput,
    offerCall,
    updateCallOffer,
    answerCallOffer,
    subscribeToAnsweredOfferChanges,
    subscribeToCallOfferChanges,
    subscribeToRespondedCallChanges,
  };

  return (
    <callContext.Provider value={value}>
      {children}
      <Toaster />
    </callContext.Provider>
  );
};
